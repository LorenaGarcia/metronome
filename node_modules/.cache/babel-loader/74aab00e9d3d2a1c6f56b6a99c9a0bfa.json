{"ast":null,"code":"var audioContext = null;\nvar unlocked = false;\nvar isPlaying = false; // Are we currently playing?\n\nvar startTime; // The start time of the entire sequence.\n\nvar current16thNote; // What note is currently last scheduled?\n\nvar tempo = 120.0; // tempo (in beats per minute)\n\nvar lookahead = 25.0; // How frequently to call scheduling function\n//(in milliseconds)\n\nvar scheduleAheadTime = 0.1; // How far ahead to schedule audio (sec)\n// This is calculated from lookahead, and overlaps\n// with next interval (in case the timer is late)\n\nvar nextNoteTime = 0.0; // when the next note is due.\n\nvar noteResolution = 0; // 0 == 16th, 1 == 8th, 2 == quarter note\n\nvar noteLength = 0.05; // length of \"beep\" (in seconds)\n\nvar canvas, // the canvas element\ncanvasContext; // canvasContext is the canvas' context 2D\n\nvar last16thNoteDrawn = -1; // the last \"box\" we drew on the screen\n\nvar notesInQueue = []; // the notes that have been put into the web audio,\n// and may or may not have played yet. {note, time}\n\nvar timerWorker = null; // The Web Worker used to fire timer messages\n// First, let's shim the requestAnimationFrame API, with a setTimeout fallback\n\nwindow.requestAnimFrame = function () {\n  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n    window.setTimeout(callback, 1000 / 60);\n  };\n}();\n\nfunction nextNote() {\n  // Advance current note and time by a 16th note...\n  var secondsPerBeat = 60.0 / tempo; // Notice this picks up the CURRENT\n  // tempo value to calculate beat length.\n\n  nextNoteTime += 0.25 * secondsPerBeat; // Add beat length to last beat time\n\n  current16thNote++; // Advance the beat number, wrap to zero\n\n  if (current16thNote == 16) {\n    current16thNote = 0;\n  }\n}\n\nfunction scheduleNote(beatNumber, time) {\n  // push the note on the queue, even if we're not playing.\n  notesInQueue.push({\n    note: beatNumber,\n    time: time\n  });\n  if (noteResolution == 1 && beatNumber % 2) return; // we're not playing non-8th 16th notes\n\n  if (noteResolution == 2 && beatNumber % 4) return; // we're not playing non-quarter 8th notes\n  // create an oscillator\n\n  var osc = audioContext.createOscillator();\n  osc.connect(audioContext.destination);\n  if (beatNumber % 16 === 0) // beat 0 == high pitch\n    osc.frequency.value = 880.0;else if (beatNumber % 4 === 0) // quarter notes = medium pitch\n    osc.frequency.value = 440.0; // other 16th notes = low pitch\n  else osc.frequency.value = 220.0;\n  osc.start(time);\n  osc.stop(time + noteLength);\n}\n\nfunction scheduler() {\n  // while there are notes that will need to play before the next interval,\n  // schedule them and advance the pointer.\n  while (nextNoteTime < audioContext.currentTime + scheduleAheadTime) {\n    scheduleNote(current16thNote, nextNoteTime);\n    nextNote();\n  }\n}\n\nfunction play() {\n  if (!unlocked) {\n    // play silent buffer to unlock the audio\n    var buffer = audioContext.createBuffer(1, 1, 22050);\n    var node = audioContext.createBufferSource();\n    node.buffer = buffer;\n    node.start(0);\n    unlocked = true;\n  }\n\n  isPlaying = !isPlaying;\n\n  if (isPlaying) {\n    // start playing\n    current16thNote = 0;\n    nextNoteTime = audioContext.currentTime;\n    timerWorker.postMessage(\"start\");\n    return \"stop\";\n  } else {\n    timerWorker.postMessage(\"stop\");\n    return \"play\";\n  }\n}\n\nfunction resetCanvas(e) {\n  // resize the canvas - but remember - this clears the canvas too.\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight; //make sure we scroll to the top left.\n\n  window.scrollTo(0, 0);\n}\n\nfunction draw() {\n  var currentNote = last16thNoteDrawn;\n  var currentTime = audioContext.currentTime;\n\n  while (notesInQueue.length && notesInQueue[0].time < currentTime) {\n    currentNote = notesInQueue[0].note;\n    notesInQueue.splice(0, 1); // remove note from queue\n  } // We only need to draw if the note has moved.\n\n\n  if (last16thNoteDrawn != currentNote) {\n    var x = Math.floor(canvas.width / 18);\n    canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n\n    for (var i = 0; i < 16; i++) {\n      canvasContext.fillStyle = currentNote == i ? currentNote % 4 === 0 ? \"red\" : \"blue\" : \"black\";\n      canvasContext.fillRect(x * (i + 1), x, x / 2, x / 2);\n    }\n\n    last16thNoteDrawn = currentNote;\n  } // set up to draw again\n\n\n  requestAnimFrame(draw);\n}\n\nfunction init() {\n  var container = document.createElement(\"div\");\n  container.className = \"container\";\n  canvas = document.createElement(\"canvas\");\n  canvasContext = canvas.getContext(\"2d\");\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  document.body.appendChild(container);\n  container.appendChild(canvas);\n  canvasContext.strokeStyle = \"#ffffff\";\n  canvasContext.lineWidth = 2; // NOTE: THIS RELIES ON THE MONKEYPATCH LIBRARY BEING LOADED FROM\n  // Http://cwilso.github.io/AudioContext-MonkeyPatch/AudioContextMonkeyPatch.js\n  // TO WORK ON CURRENT CHROME!!  But this means our code can be properly\n  // spec-compliant, and work on Chrome, Safari and Firefox.\n\n  audioContext = new AudioContext(); // if we wanted to load audio files, etc., this is where we should do it.\n\n  window.onorientationchange = resetCanvas;\n  window.onresize = resetCanvas;\n  requestAnimFrame(draw); // start the drawing loop.\n\n  timerWorker = new Worker(\"js/metronomeworker.js\");\n\n  timerWorker.onmessage = function (e) {\n    if (e.data == \"tick\") {\n      // console.log(\"tick!\");\n      scheduler();\n    } else console.log(\"message: \" + e.data);\n  };\n\n  timerWorker.postMessage({\n    interval: lookahead\n  });\n}\n\nwindow.addEventListener(\"load\", init);","map":{"version":3,"sources":["/Users/lorraine/Documents/htdocs/lorraine-react/react-metronome/src/Metronome.js"],"names":["audioContext","unlocked","isPlaying","startTime","current16thNote","tempo","lookahead","scheduleAheadTime","nextNoteTime","noteResolution","noteLength","canvas","canvasContext","last16thNoteDrawn","notesInQueue","timerWorker","window","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","nextNote","secondsPerBeat","scheduleNote","beatNumber","time","push","note","osc","createOscillator","connect","destination","frequency","value","start","stop","scheduler","currentTime","play","buffer","createBuffer","node","createBufferSource","postMessage","resetCanvas","e","width","innerWidth","height","innerHeight","scrollTo","draw","currentNote","length","splice","x","Math","floor","clearRect","i","fillStyle","fillRect","init","container","document","createElement","className","getContext","body","appendChild","strokeStyle","lineWidth","AudioContext","onorientationchange","onresize","Worker","onmessage","data","console","log","interval","addEventListener"],"mappings":"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","sourcesContent":["var audioContext = null;\nvar unlocked = false;\nvar isPlaying = false; // Are we currently playing?\nvar startTime; // The start time of the entire sequence.\nvar current16thNote; // What note is currently last scheduled?\nvar tempo = 120.0; // tempo (in beats per minute)\nvar lookahead = 25.0; // How frequently to call scheduling function\n//(in milliseconds)\nvar scheduleAheadTime = 0.1; // How far ahead to schedule audio (sec)\n// This is calculated from lookahead, and overlaps\n// with next interval (in case the timer is late)\nvar nextNoteTime = 0.0; // when the next note is due.\nvar noteResolution = 0; // 0 == 16th, 1 == 8th, 2 == quarter note\nvar noteLength = 0.05; // length of \"beep\" (in seconds)\nvar canvas, // the canvas element\n  canvasContext; // canvasContext is the canvas' context 2D\nvar last16thNoteDrawn = -1; // the last \"box\" we drew on the screen\nvar notesInQueue = []; // the notes that have been put into the web audio,\n// and may or may not have played yet. {note, time}\nvar timerWorker = null; // The Web Worker used to fire timer messages\n\n// First, let's shim the requestAnimationFrame API, with a setTimeout fallback\nwindow.requestAnimFrame = (function() {\n  return (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    function(callback) {\n      window.setTimeout(callback, 1000 / 60);\n    }\n  );\n})();\n\nfunction nextNote() {\n  // Advance current note and time by a 16th note...\n  var secondsPerBeat = 60.0 / tempo; // Notice this picks up the CURRENT\n  // tempo value to calculate beat length.\n  nextNoteTime += 0.25 * secondsPerBeat; // Add beat length to last beat time\n\n  current16thNote++; // Advance the beat number, wrap to zero\n  if (current16thNote == 16) {\n    current16thNote = 0;\n  }\n}\n\nfunction scheduleNote(beatNumber, time) {\n  // push the note on the queue, even if we're not playing.\n  notesInQueue.push({ note: beatNumber, time: time });\n\n  if (noteResolution == 1 && beatNumber % 2) return; // we're not playing non-8th 16th notes\n  if (noteResolution == 2 && beatNumber % 4) return; // we're not playing non-quarter 8th notes\n\n  // create an oscillator\n  var osc = audioContext.createOscillator();\n  osc.connect(audioContext.destination);\n  if (beatNumber % 16 === 0)\n    // beat 0 == high pitch\n    osc.frequency.value = 880.0;\n  else if (beatNumber % 4 === 0)\n    // quarter notes = medium pitch\n    osc.frequency.value = 440.0;\n  // other 16th notes = low pitch\n  else osc.frequency.value = 220.0;\n\n  osc.start(time);\n  osc.stop(time + noteLength);\n}\n\nfunction scheduler() {\n  // while there are notes that will need to play before the next interval,\n  // schedule them and advance the pointer.\n  while (nextNoteTime < audioContext.currentTime + scheduleAheadTime) {\n    scheduleNote(current16thNote, nextNoteTime);\n    nextNote();\n  }\n}\n\nfunction play() {\n  if (!unlocked) {\n    // play silent buffer to unlock the audio\n    var buffer = audioContext.createBuffer(1, 1, 22050);\n    var node = audioContext.createBufferSource();\n    node.buffer = buffer;\n    node.start(0);\n    unlocked = true;\n  }\n\n  isPlaying = !isPlaying;\n\n  if (isPlaying) {\n    // start playing\n    current16thNote = 0;\n    nextNoteTime = audioContext.currentTime;\n    timerWorker.postMessage(\"start\");\n    return \"stop\";\n  } else {\n    timerWorker.postMessage(\"stop\");\n    return \"play\";\n  }\n}\n\nfunction resetCanvas(e) {\n  // resize the canvas - but remember - this clears the canvas too.\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n\n  //make sure we scroll to the top left.\n  window.scrollTo(0, 0);\n}\n\nfunction draw() {\n  var currentNote = last16thNoteDrawn;\n  var currentTime = audioContext.currentTime;\n\n  while (notesInQueue.length && notesInQueue[0].time < currentTime) {\n    currentNote = notesInQueue[0].note;\n    notesInQueue.splice(0, 1); // remove note from queue\n  }\n\n  // We only need to draw if the note has moved.\n  if (last16thNoteDrawn != currentNote) {\n    var x = Math.floor(canvas.width / 18);\n    canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n    for (var i = 0; i < 16; i++) {\n      canvasContext.fillStyle =\n        currentNote == i ? (currentNote % 4 === 0 ? \"red\" : \"blue\") : \"black\";\n      canvasContext.fillRect(x * (i + 1), x, x / 2, x / 2);\n    }\n    last16thNoteDrawn = currentNote;\n  }\n\n  // set up to draw again\n  requestAnimFrame(draw);\n}\n\nfunction init() {\n  var container = document.createElement(\"div\");\n\n  container.className = \"container\";\n  canvas = document.createElement(\"canvas\");\n  canvasContext = canvas.getContext(\"2d\");\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  document.body.appendChild(container);\n  container.appendChild(canvas);\n  canvasContext.strokeStyle = \"#ffffff\";\n  canvasContext.lineWidth = 2;\n\n  // NOTE: THIS RELIES ON THE MONKEYPATCH LIBRARY BEING LOADED FROM\n  // Http://cwilso.github.io/AudioContext-MonkeyPatch/AudioContextMonkeyPatch.js\n  // TO WORK ON CURRENT CHROME!!  But this means our code can be properly\n  // spec-compliant, and work on Chrome, Safari and Firefox.\n\n  audioContext = new AudioContext();\n\n  // if we wanted to load audio files, etc., this is where we should do it.\n\n  window.onorientationchange = resetCanvas;\n  window.onresize = resetCanvas;\n\n  requestAnimFrame(draw); // start the drawing loop.\n\n  timerWorker = new Worker(\"js/metronomeworker.js\");\n\n  timerWorker.onmessage = function(e) {\n    if (e.data == \"tick\") {\n      // console.log(\"tick!\");\n      scheduler();\n    } else console.log(\"message: \" + e.data);\n  };\n  timerWorker.postMessage({ interval: lookahead });\n}\n\nwindow.addEventListener(\"load\", init);\n"]},"metadata":{},"sourceType":"module"}