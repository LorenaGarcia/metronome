{"ast":null,"code":"var _jsxFileName = \"/Users/lorraine/Documents/htdocs/lorraine-react/react-metronome/src/Metronome.js\";\nimport React, { Component } from \"react\";\nimport \"./Metronome.css\";\n\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 100,\n      beatsPerMeasure: 4\n    };\n  }\n\n  render() {\n    let bpm = 100;\n    let playing = false;\n    return React.createElement(\"div\", {\n      className: \"metronome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bpm-slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, bpm, \" BPM\"), React.createElement(\"input\", {\n      type: \"range\",\n      miin: \"60\",\n      max: \"240\",\n      value: bpm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, playing ? \"Stop\" : \"Start\"));\n  }\n\n}\n\nexport default Metronome;","map":{"version":3,"sources":["/Users/lorraine/Documents/htdocs/lorraine-react/react-metronome/src/Metronome.js"],"names":["React","Component","Metronome","constructor","props","state","playing","count","bpm","beatsPerMeasure","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,iBAAP;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAChCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,KADE;AAEXC,MAAAA,KAAK,EAAE,CAFI;AAGXC,MAAAA,GAAG,EAAE,GAHM;AAIXC,MAAAA,eAAe,EAAE;AAJN,KAAb;AAMD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAIF,GAAG,GAAG,GAAV;AACA,QAAIF,OAAO,GAAG,KAAd;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAME,GAAN,SADF,EAEE;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,IAAI,EAAC,IAAzB;AAA8B,MAAA,GAAG,EAAC,KAAlC;AAAwC,MAAA,KAAK,EAAEA,GAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASF,OAAO,GAAG,MAAH,GAAY,OAA5B,CALF,CADF;AASD;;AAzB+B;;AA4BlC,eAAeJ,SAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Metronome.css\";\n\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 100,\n      beatsPerMeasure: 4\n    };\n  }\n\n  render() {\n    let bpm = 100;\n    let playing = false;\n\n    return (\n      <div className=\"metronome\">\n        <div className=\"bpm-slider\">\n          <div>{bpm} BPM</div>\n          <input type=\"range\" miin=\"60\" max=\"240\" value={bpm} />\n        </div>\n        <button>{playing ? \"Stop\" : \"Start\"}</button>\n      </div>\n    );\n  }\n}\n\nexport default Metronome;\n"]},"metadata":{},"sourceType":"module"}