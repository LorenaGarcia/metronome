{"ast":null,"code":"var _jsxFileName = \"/Users/lorraine/Documents/htdocs/lorraine-react/react-metronome/src/Metronome.js\";\nimport React, { Component } from \"react\";\nimport \"./Metronome.css\";\nimport click1 from \"./click1.wav\";\nimport click2 from \"./click2.wav\";\n\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBpmchange = event => {\n      const bpm = event.target.value;\n      this.setState({\n        bpm\n      });\n    };\n\n    this.startStop = () => {\n      this.click1.play();\n\n      if (this.state.playing) {\n        clearInterval(this.timer);\n        this.setState({\n          playing: false\n        });\n      }\n    };\n\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 100,\n      beatsPerMeasure: 4\n    };\n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2);\n  }\n\n  render() {\n    const _this$state = this.state,\n          playing = _this$state.playing,\n          bpm = _this$state.bpm;\n    return React.createElement(\"div\", {\n      className: \"metronome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bpm-slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, bpm, \" BPM\"), React.createElement(\"input\", {\n      type: \"range\",\n      min: \"60\",\n      max: \"240\",\n      value: bpm,\n      onChange: this.handleBpmchange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: this.startStop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, playing ? \"Stop\" : \"Start\"));\n  }\n\n}\n\nexport default Metronome;","map":{"version":3,"sources":["/Users/lorraine/Documents/htdocs/lorraine-react/react-metronome/src/Metronome.js"],"names":["React","Component","click1","click2","Metronome","constructor","props","handleBpmchange","event","bpm","target","value","setState","startStop","play","state","playing","clearInterval","timer","count","beatsPerMeasure","Audio","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,iBAAP;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAChCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAcnBC,eAdmB,GAcDC,KAAK,IAAI;AACzB,YAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAzB;AACA,WAAKC,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACD,KAjBkB;;AAAA,SAmBnBI,SAnBmB,GAmBP,MAAM;AAChB,WAAKX,MAAL,CAAYY,IAAZ;;AACA,UAAI,KAAKC,KAAL,CAAWC,OAAf,EAAwB;AACtBC,QAAAA,aAAa,CAAC,KAAKC,KAAN,CAAb;AACA,aAAKN,QAAL,CAAc;AACZI,UAAAA,OAAO,EAAE;AADG,SAAd;AAGD;AACF,KA3BkB;;AAGjB,SAAKD,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,KADE;AAEXG,MAAAA,KAAK,EAAE,CAFI;AAGXV,MAAAA,GAAG,EAAE,GAHM;AAIXW,MAAAA,eAAe,EAAE;AAJN,KAAb;AAOA,SAAKlB,MAAL,GAAc,IAAImB,KAAJ,CAAUnB,MAAV,CAAd;AACA,SAAKC,MAAL,GAAc,IAAIkB,KAAJ,CAAUlB,MAAV,CAAd;AACD;;AAiBDmB,EAAAA,MAAM,GAAG;AAAA,wBACkB,KAAKP,KADvB;AAAA,UACCC,OADD,eACCA,OADD;AAAA,UACUP,GADV,eACUA,GADV;AAGP,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,GAAN,SADF,EAEE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,GAAG,EAAC,IAFN;AAGE,MAAA,GAAG,EAAC,KAHN;AAIE,MAAA,KAAK,EAAEA,GAJT;AAKE,MAAA,QAAQ,EAAE,KAAKF,eALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAWE;AAAQ,MAAA,OAAO,EAAE,KAAKM,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkCG,OAAO,GAAG,MAAH,GAAY,OAArD,CAXF,CADF;AAeD;;AAhD+B;;AAmDlC,eAAeZ,SAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Metronome.css\";\nimport click1 from \"./click1.wav\";\nimport click2 from \"./click2.wav\";\n\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 100,\n      beatsPerMeasure: 4\n    };\n\n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2);\n  }\n\n  handleBpmchange = event => {\n    const bpm = event.target.value;\n    this.setState({ bpm });\n  };\n\n  startStop = () => {\n    this.click1.play();\n    if (this.state.playing) {\n      clearInterval(this.timer);\n      this.setState({\n        playing: false\n      });\n    }\n  };\n\n  render() {\n    const { playing, bpm } = this.state;\n\n    return (\n      <div className=\"metronome\">\n        <div className=\"bpm-slider\">\n          <div>{bpm} BPM</div>\n          <input\n            type=\"range\"\n            min=\"60\"\n            max=\"240\"\n            value={bpm}\n            onChange={this.handleBpmchange}\n          />\n        </div>\n        <button onClick={this.startStop}>{playing ? \"Stop\" : \"Start\"}</button>\n      </div>\n    );\n  }\n}\n\nexport default Metronome;\n"]},"metadata":{},"sourceType":"module"}